window.repositoryObject = {"parameters":[{"name":"Ins_ID","description":null,"mode":"IN","data_type":"int","custom_fields":{},"linked_terms":[]},{"name":"C_ID","description":null,"mode":"IN","data_type":"int","custom_fields":{},"linked_terms":[]},{"name":"EName","description":null,"mode":"IN","data_type":"varchar(100)","custom_fields":{},"linked_terms":[]},{"name":"MCQ_num","description":null,"mode":"IN","data_type":"int","custom_fields":{},"linked_terms":[]},{"name":"TF_num","description":null,"mode":"IN","data_type":"int","custom_fields":{},"linked_terms":[]},{"name":"MCQ_grade","description":null,"mode":"IN","data_type":"int","custom_fields":{},"linked_terms":[]},{"name":"TF_grade","description":null,"mode":"IN","data_type":"int","custom_fields":{},"linked_terms":[]}],"parameters_custom_fields":[],"dependencies":{"uses":[],"used_by":[]},"object_id":"p55","name":"Exam_Generation","subtype":"PROCEDURE","is_user_defined":false,"description":null,"summary":[{"field":"Documentation","value":{"_type":"link","name":"Examination_System_DATA_Dictionary","id":"d2"}},{"field":"Schema","value":"dbo"},{"field":"Name","value":"Exam_Generation"},{"field":"Type","value":"Procedure"}],"script":"create   proc Exam_Generation\r\n\t@Ins_ID int,\r\n\t@C_ID int,\r\n\t@EName varchar(100),\r\n\t@MCQ_num int,\r\n\t@TF_num int,\r\n\t@MCQ_grade int,\r\n\t@TF_grade int\r\nas\r\n\tbegin try\r\n\t\tbegin transaction\r\n\t\t\t--Check if instructor teaches said Course\r\n\t\t\tDeclare @E_ID int\r\n\t\t\tif (Exists(Select * from Teaching where Instructor_Id=@Ins_ID and Course_Id=@C_ID))\r\n\t\t\tbegin\r\n\t\t\t\tinsert into dbo.Exam(Instructor_Id,Course_Id,Name,MCQ_Grade,TF_Grade,Date) \r\n\t\t\t\tvalues (@Ins_ID,@C_ID,@EName,@MCQ_grade,@TF_grade,GETDATE());\r\n\t\t\t\tset @E_ID=SCOPE_IDENTITY();\r\n\t\t\tend\r\n\t\t\telse\r\n\t\t\tbegin\r\n\t\t\t\tTHROW 50001, 'Instructor does not teach the specified course.', 1;\t\r\n\t\t\tend\r\n\t\t\t--Retrive the Course questions \r\n\t\t\tDeclare @MCQ_Final_Table table( Q_ID int);\r\n\t\t\tDeclare @TF_Final_Table table( Q_ID int);\r\n\t\t\tDeclare @MCQ_Table table( Q_ID int );\r\n\t\t\tInsert into @MCQ_Table(Q_ID) Select Id from Question where Type='MCQ' and Course_Id=@C_ID\r\n\t\t\tDeclare @MCQ_COUNT int\r\n\t\t\tset @MCQ_COUNT=(Select COUNT(Q_ID) From @MCQ_Table)\r\n\t\t\tif (@MCQ_COUNT >= @MCQ_num)\r\n\t\t\tbegin\r\n\t\t\t\tinsert into @MCQ_Final_Table select top(@MCQ_num) Q_ID from @MCQ_Table order by NEWID();\r\n\t\t\tend\r\n\t\t\telse\r\n\t\t\tbegin\r\n\t\t\t\tTHROW 50002, 'Not enough MCQ questions.', 1;\t\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tDeclare @TF_Table table( Q_ID int );\r\n\t\t\tInsert into @TF_Table Select Id from Question where Type='TF' and Course_Id=@C_ID\r\n\t\t\tDeclare @TF_COUNT int\r\n\t\t\tset @TF_COUNT=(Select COUNT(Q_ID) From @TF_Table)\r\n\t\t\tif (@TF_COUNT >= @TF_num)\r\n\t\t\t\tbegin\r\n\t\t\t\t\tinsert into @TF_Final_Table select top(@TF_num) Q_ID from @TF_Table order by NEWID();\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\tbegin\r\n\t\t\t\tTHROW 50003, 'Not enough True or false questions.', 1;\t\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tDeclare @RowNumberedData table(\r\n\t\t\t\tExam_ID int,\r\n\t\t\t\tQuestion_ID int,\r\n\t\t\t\tQ_Order int)\r\n\t\t\tinsert into @RowNumberedData SELECT\r\n\t\t\t\t\t@E_ID,  -- First column (constant value)\r\n\t\t\t\t\tt1.Q_ID,  -- Second column (merging two columns)\r\n\t\t\t\t\tROW_NUMBER() OVER (ORDER BY NEWID())  -- Third column (sequential count starting from 1)\r\n\t\t\t\tFROM (Select Q_ID from @MCQ_Final_Table union all Select Q_ID from @TF_Final_Table) t1;\r\n\t\t\t\r\n\r\n\t\t\t--insert into ExamQuestion \r\n\t\t\tinsert into dbo.ExamQuestion(Exam_Id,Question_Id,Question_Order) \r\n\t\t\tselect Exam_ID,Question_ID,Q_Order from @RowNumberedData\r\n\t\tcommit transaction\r\n\tend try\r\n\tbegin catch\r\n\t\tSELECT ERROR_MESSAGE() AS ErrorMessage;\r\n\t\trollback transaction\r\n\tend catch;","imported_at":"2025-02-01 01:13"};