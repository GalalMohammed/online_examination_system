// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;

namespace examination_system.Models;

public partial class Examination_SystemContext : DbContext
{
    public Examination_SystemContext()
    {
    }

    public Examination_SystemContext(DbContextOptions<Examination_SystemContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Choice> Choices { get; set; }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Enrollment> Enrollments { get; set; }

    public virtual DbSet<Exam> Exams { get; set; }

    public virtual DbSet<ExamQuestion> ExamQuestions { get; set; }

    public virtual DbSet<Instructor> Instructors { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<Student> Students { get; set; }

    public virtual DbSet<StudentAnswer> StudentAnswers { get; set; }

    public virtual DbSet<Topic> Topics { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        string jsonString = File.ReadAllText(".appSettings.json");
        //string jsonString = File.ReadAllText("../../../appSettings.json");
        var jsonData = JsonSerializer.Deserialize<Dictionary<string, string>>(jsonString);

        if (jsonData.TryGetValue("ConnectionString", out var connectionString))
        {
            
            optionsBuilder.UseSqlServer(connectionString);
        }
        
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Choice>(entity =>
        {
            entity.HasOne(d => d.Question).WithMany(p => p.Choices).HasConstraintName("FK_Choice_Question");
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasMany(d => d.Instructors).WithMany(p => p.Courses)
                .UsingEntity<Dictionary<string, object>>(
                    "Teaching",
                    r => r.HasOne<Instructor>().WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Teaching_Instructor"),
                    l => l.HasOne<Course>().WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Teaching_Course"),
                    j =>
                    {
                        j.HasKey("CourseId", "InstructorId");
                        j.ToTable("Teaching");
                        j.IndexerProperty<int>("CourseId").HasColumnName("Course_Id");
                        j.IndexerProperty<int>("InstructorId").HasColumnName("Instructor_Id");
                    });
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasOne(d => d.Manager).WithMany(p => p.Departments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Department_Instructor");
        });

        modelBuilder.Entity<Enrollment>(entity =>
        {
            entity.HasOne(d => d.Course).WithMany(p => p.Enrollments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Enrollment_Course");

            entity.HasOne(d => d.Student).WithMany(p => p.Enrollments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Enrollment_Student");
        });

        modelBuilder.Entity<Exam>(entity =>
        {
            entity.HasOne(d => d.Course).WithMany(p => p.Exams)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Exam_Course");

            entity.HasOne(d => d.Instructor).WithMany(p => p.Exams)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Exam_Instructor");
        });

        modelBuilder.Entity<ExamQuestion>(entity =>
        {
            entity.HasOne(d => d.Exam).WithMany(p => p.ExamQuestions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ExamQuestion_Exam");

            entity.HasOne(d => d.Question).WithMany(p => p.ExamQuestions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ExamQuestion_Question");
        });

        modelBuilder.Entity<Instructor>(entity =>
        {
            entity.HasOne(d => d.Department).WithMany(p => p.Instructors).HasConstraintName("FK_Instructor_Department");
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasOne(d => d.Course).WithMany(p => p.Questions).HasConstraintName("FK_Question_Course");
        });

        modelBuilder.Entity<Student>(entity =>
        {
            entity.HasOne(d => d.Department).WithMany(p => p.Students)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Student_Department");
        });

        modelBuilder.Entity<StudentAnswer>(entity =>
        {
            entity.HasOne(d => d.Student).WithMany(p => p.StudentAnswers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StudentAnswer_Student");

            entity.HasOne(d => d.ExamQuestion).WithMany(p => p.StudentAnswers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StudentAnswer_ExamQuestion");
        });

        modelBuilder.Entity<Topic>(entity =>
        {
            entity.HasOne(d => d.Course).WithMany(p => p.Topics)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Topic_Course");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}